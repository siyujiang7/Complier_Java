--------------------------------------------------
token: char* 1 pts
--------------------------------------------------
char* -> 0

--------------------------------------------------
token: char** 1 pts
--------------------------------------------------
char** -> 0

--------------------------------------------------
token: long* 1 pts
--------------------------------------------------
long* -> 0

--------------------------------------------------
token: long 1 pts
--------------------------------------------------
long -> 0

--------------------------------------------------
token: void 1 pts
--------------------------------------------------
void -> 0

--------------------------------------------------
token: if 1 pts
--------------------------------------------------
if -> 0

--------------------------------------------------
token: else 1 pts
--------------------------------------------------
else -> 0

--------------------------------------------------
token: while 1 pts
--------------------------------------------------
while -> 0

--------------------------------------------------
token: do 1 pts
--------------------------------------------------
do -> 0

--------------------------------------------------
token: for 1 pts
--------------------------------------------------
for -> 0

--------------------------------------------------
token: continue 1 pts
--------------------------------------------------
continue -> 0

--------------------------------------------------
token: break 1 pts
--------------------------------------------------
break -> 0

--------------------------------------------------
token: return 1 pts
--------------------------------------------------
return -> 0

--------------------------------------------------
token: double 1 pts
--------------------------------------------------
double -> 0

--------------------------------------------------
token: double* 1 pts
--------------------------------------------------
double* -> 0

--------------------------------------------------
token: ( 1 pts
--------------------------------------------------
( -> 0

--------------------------------------------------
token: ) 1 pts
--------------------------------------------------
) -> 0

--------------------------------------------------
token: [ 1 pts
--------------------------------------------------
[ -> 0

--------------------------------------------------
token: [ 1 pts
--------------------------------------------------
[ -> 0

--------------------------------------------------
token: { 1 pts
--------------------------------------------------
{ -> 0

--------------------------------------------------
token: } 1 pts
--------------------------------------------------
} -> 0

--------------------------------------------------
token: , 1 pts
--------------------------------------------------
, -> 0

--------------------------------------------------
token: ; 1 pts
--------------------------------------------------
; -> 0

--------------------------------------------------
token: = 1 pts
--------------------------------------------------
= -> 0

--------------------------------------------------
token: & 1 pts
--------------------------------------------------
& -> 0

--------------------------------------------------
token: || 1 pts
--------------------------------------------------
|| -> 0

--------------------------------------------------
token: && 1 pts
--------------------------------------------------
&& -> 0

--------------------------------------------------
token: == 1 pts
--------------------------------------------------
== -> 0

--------------------------------------------------
token: != 1 pts
--------------------------------------------------
!= -> 0

--------------------------------------------------
token: < 1 pts
--------------------------------------------------
< -> 0

--------------------------------------------------
token: > 1 pts
--------------------------------------------------
> -> 0

--------------------------------------------------
token: <= 1 pts
--------------------------------------------------
<= -> 0

--------------------------------------------------
token: >= 1 pts
--------------------------------------------------
>= -> 0

--------------------------------------------------
token: + 1 pts
--------------------------------------------------
+ -> 0

--------------------------------------------------
token: - 1 pts
--------------------------------------------------
- -> 0

--------------------------------------------------
token: \052 1 pts
--------------------------------------------------
* -> 0

--------------------------------------------------
token: / 1 pts
--------------------------------------------------
/ -> 0

--------------------------------------------------
token: \045 1 pts
--------------------------------------------------
% -> 0

--------------------------------------------------
token: /\052\052/test 2 pts
--------------------------------------------------
test -> 0

--------------------------------------------------
token: /\052comment\052/test 1 pts
--------------------------------------------------
test -> 0

--------------------------------------------------
token: /\052double(10)\052/test 1 pts
--------------------------------------------------
test -> 0

--------------------------------------------------
token: //\ntest 2 pts
--------------------------------------------------
test -> 0

--------------------------------------------------
token: //comment\ntest 1 pts
--------------------------------------------------
test -> 0

--------------------------------------------------
token: //double(10)\ntest 1 pts
--------------------------------------------------
test -> 0

--------------------------------------------------
token: hello 2 pts
--------------------------------------------------
hello -> 0

--------------------------------------------------
token: ThIsIs_4_T35T 2 pts
--------------------------------------------------
ThIsIs_4_T35T -> 0

--------------------------------------------------
token: 'c' 2 pts
--------------------------------------------------
'c' -> 0

--------------------------------------------------
token: '!' 2 pts
--------------------------------------------------
'!' -> 0

--------------------------------------------------
token: '\045' 1 pts
--------------------------------------------------
'%' -> 0

--------------------------------------------------
token: 10 1 pts
--------------------------------------------------
10 -> 0

--------------------------------------------------
token: 1234567891234567890 2 pts
--------------------------------------------------
1234567891234567890 -> 0

--------------------------------------------------
token: 1234567890.0987654321 2 pts
--------------------------------------------------
1234567890.0987654321 -> 0

--------------------------------------------------
token: .1337E4 1 pts
--------------------------------------------------
.1337E4 -> 0

--------------------------------------------------
file: tests/ampersand.c 1 pts
--------------------------------------------------
void -> 0
inc -> 1
( -> 2
long* -> 3
a -> 1
) -> 4
{ -> 5
a -> 1
[ -> 6
0 -> 7
] -> 8
= -> 9
a -> 1
[ -> 6
0 -> 7
] -> 8
+ -> 10
1 -> 7
; -> 11
} -> 12
void -> 0
main -> 1
( -> 2
) -> 4
{ -> 5
long -> 13
a -> 1
; -> 11
a -> 1
= -> 9
8 -> 7
; -> 11
printf -> 1
( -> 2
a=%d\n -> 14
, -> 15
a -> 1
) -> 4
; -> 11
inc -> 1
( -> 2
& -> 16
a -> 1
) -> 4
; -> 11
printf -> 1
( -> 2
a=%d\n -> 14
, -> 15
a -> 1
) -> 4
; -> 11
} -> 12

--------------------------------------------------
file: tests/and.c 1 pts
--------------------------------------------------
void -> 0
main -> 1
( -> 2
) -> 3
{ -> 4
printf -> 1
( -> 2
0 && 0 = %d\n -> 5
, -> 6
0 -> 7
&& -> 8
0 -> 7
) -> 3
; -> 9
printf -> 1
( -> 2
0 && 1 = %d\n -> 5
, -> 6
0 -> 7
&& -> 8
1 -> 7
) -> 3
; -> 9
printf -> 1
( -> 2
1 && 0 = %d\n -> 5
, -> 6
1 -> 7
&& -> 8
0 -> 7
) -> 3
; -> 9
printf -> 1
( -> 2
1 && 1 = %d\n -> 5
, -> 6
1 -> 7
&& -> 8
1 -> 7
) -> 3
; -> 9
} -> 10

--------------------------------------------------
file: tests/args.c 1 pts
--------------------------------------------------
void -> 0
compute -> 1
( -> 2
long -> 3
a -> 1
, -> 4
long -> 3
b -> 1
) -> 5
{ -> 6
printf -> 1
( -> 2
a=%d b=%d\n -> 7
, -> 4
a -> 1
, -> 4
b -> 1
) -> 5
; -> 8
} -> 9
void -> 0
main -> 1
( -> 2
) -> 5
{ -> 6
compute -> 1
( -> 2
6 -> 10
, -> 4
7 -> 10
) -> 5
; -> 8
} -> 9

--------------------------------------------------
file: tests/array.c 1 pts
--------------------------------------------------
void -> 0
main -> 1
( -> 2
) -> 3
{ -> 4
long* -> 5
a -> 1
; -> 6
a -> 1
= -> 7
malloc -> 1
( -> 2
8 -> 8
* -> 9
20 -> 8
) -> 3
; -> 6
a -> 1
[ -> 10
8 -> 8
] -> 11
= -> 7
9 -> 8
; -> 6
printf -> 1
( -> 2
a[8]=%d\n -> 12
, -> 13
a -> 1
[ -> 10
8 -> 8
] -> 11
) -> 3
; -> 6
} -> 14

--------------------------------------------------
file: tests/array2.c 1 pts
--------------------------------------------------
void -> 0
main -> 1
( -> 2
) -> 3
{ -> 4
long* -> 5
a -> 1
; -> 6
long -> 7
i -> 1
; -> 6
a -> 1
= -> 8
malloc -> 1
( -> 2
8 -> 9
* -> 10
20 -> 9
) -> 3
; -> 6
for -> 11
( -> 2
i -> 1
= -> 8
0 -> 9
; -> 6
i -> 1
< -> 12
20 -> 9
; -> 6
i -> 1
= -> 8
i -> 1
+ -> 13
1 -> 9
) -> 3
{ -> 4
a -> 1
[ -> 14
i -> 1
] -> 15
= -> 8
3 -> 9
* -> 10
i -> 1
; -> 6
} -> 16
printf -> 1
( -> 2
Ok so far\n -> 17
) -> 3
; -> 6
for -> 11
( -> 2
i -> 1
= -> 8
0 -> 9
; -> 6
i -> 1
< -> 12
20 -> 9
; -> 6
i -> 1
= -> 8
i -> 1
+ -> 13
1 -> 9
) -> 3
{ -> 4
printf -> 1
( -> 2
%d: %d\n -> 17
, -> 18
i -> 1
, -> 18
a -> 1
[ -> 14
i -> 1
] -> 15
) -> 3
; -> 6
} -> 16
} -> 16

--------------------------------------------------
file: tests/break.c 1 pts
--------------------------------------------------
long -> 0
i -> 1
; -> 2
void -> 3
main -> 1
( -> 4
) -> 5
{ -> 6
for -> 7
( -> 4
i -> 1
= -> 8
0 -> 9
; -> 2
i -> 1
< -> 10
15 -> 9
; -> 2
i -> 1
= -> 8
i -> 1
+ -> 11
1 -> 9
) -> 5
{ -> 6
if -> 12
( -> 4
i -> 1
== -> 13
5 -> 9
) -> 5
{ -> 6
break -> 14
; -> 2
} -> 15
printf -> 1
( -> 4
i=%d\n -> 16
, -> 17
i -> 1
) -> 5
; -> 2
} -> 15
printf -> 1
( -> 4
for i=%d\n -> 16
, -> 17
i -> 1
) -> 5
; -> 2
i -> 1
= -> 8
0 -> 9
; -> 2
while -> 18
( -> 4
i -> 1
< -> 10
15 -> 9
) -> 5
{ -> 6
printf -> 1
( -> 4
i=%d\n -> 16
, -> 17
i -> 1
) -> 5
; -> 2
if -> 12
( -> 4
i -> 1
== -> 13
8 -> 9
) -> 5
{ -> 6
break -> 14
; -> 2
} -> 15
i -> 1
= -> 8
i -> 1
+ -> 11
1 -> 9
; -> 2
} -> 15
printf -> 1
( -> 4
while i=%d\n -> 16
, -> 17
i -> 1
) -> 5
; -> 2
i -> 1
= -> 8
0 -> 9
; -> 2
do -> 19
{ -> 6
printf -> 1
( -> 4
i=%d\n -> 16
, -> 17
i -> 1
) -> 5
; -> 2
if -> 12
( -> 4
i -> 1
== -> 13
10 -> 9
) -> 5
{ -> 6
break -> 14
; -> 2
} -> 15
i -> 1
= -> 8
i -> 1
+ -> 11
1 -> 9
; -> 2
} -> 15
while -> 18
( -> 4
i -> 1
< -> 10
15 -> 9
) -> 5
; -> 2
printf -> 1
( -> 4
do/while i=%d\n -> 16
, -> 17
i -> 1
) -> 5
; -> 2
printf -> 1
( -> 4
OK\n -> 16
) -> 5
; -> 2
} -> 15

--------------------------------------------------
file: tests/bubblesort.c 1 pts
--------------------------------------------------
long -> 0
mysort -> 1
( -> 2
long -> 0
n -> 1
, -> 3
long* -> 4
a -> 1
) -> 5
{ -> 6
long -> 0
i -> 1
; -> 7
long -> 0
j -> 1
; -> 7
long -> 0
tmp -> 1
; -> 7
for -> 8
( -> 2
i -> 1
= -> 9
n -> 1
- -> 10
1 -> 11
; -> 7
i -> 1
> -> 12
0 -> 11
; -> 7
i -> 1
= -> 9
i -> 1
- -> 10
1 -> 11
) -> 5
{ -> 6
for -> 8
( -> 2
j -> 1
= -> 9
0 -> 11
; -> 7
j -> 1
< -> 13
i -> 1
; -> 7
j -> 1
= -> 9
j -> 1
+ -> 14
1 -> 11
) -> 5
{ -> 6
if -> 15
( -> 2
a -> 1
[ -> 16
j -> 1
] -> 17
> -> 12
a -> 1
[ -> 16
j -> 1
+ -> 14
1 -> 11
] -> 17
) -> 5
{ -> 6
tmp -> 1
= -> 9
a -> 1
[ -> 16
j -> 1
] -> 17
; -> 7
a -> 1
[ -> 16
j -> 1
] -> 17
= -> 9
a -> 1
[ -> 16
j -> 1
+ -> 14
1 -> 11
] -> 17
; -> 7
a -> 1
[ -> 16
j -> 1
+ -> 14
1 -> 11
] -> 17
= -> 9
tmp -> 1
; -> 7
} -> 18
} -> 18
} -> 18
} -> 18
void -> 19
printArray -> 1
( -> 2
char* -> 20
s -> 1
, -> 3
long -> 0
n -> 1
, -> 3
long* -> 4
a -> 1
) -> 5
{ -> 6
long -> 0
i -> 1
; -> 7
printf -> 1
( -> 2
----------- %s -----------\n -> 21
, -> 3
s -> 1
) -> 5
; -> 7
for -> 8
( -> 2
i -> 1
= -> 9
0 -> 11
; -> 7
i -> 1
< -> 13
n -> 1
; -> 7
i -> 1
= -> 9
i -> 1
+ -> 14
1 -> 11
) -> 5
{ -> 6
printf -> 1
( -> 2
%d\n -> 21
, -> 3
a -> 1
[ -> 16
i -> 1
] -> 17
) -> 5
; -> 7
} -> 18
} -> 18
void -> 19
main -> 1
( -> 2
) -> 5
{ -> 6
long -> 0
n -> 1
; -> 7
n -> 1
= -> 9
10 -> 11
; -> 7
long* -> 4
a -> 1
; -> 7
a -> 1
= -> 9
malloc -> 1
( -> 2
n -> 1
* -> 22
8 -> 11
) -> 5
; -> 7
a -> 1
[ -> 16
0 -> 11
] -> 17
= -> 9
8 -> 11
; -> 7
a -> 1
[ -> 16
1 -> 11
] -> 17
= -> 9
7 -> 11
; -> 7
a -> 1
[ -> 16
2 -> 11
] -> 17
= -> 9
1 -> 11
; -> 7
a -> 1
[ -> 16
3 -> 11
] -> 17
= -> 9
9 -> 11
; -> 7
a -> 1
[ -> 16
4 -> 11
] -> 17
= -> 9
11 -> 11
; -> 7
a -> 1
[ -> 16
5 -> 11
] -> 17
= -> 9
83 -> 11
; -> 7
a -> 1
[ -> 16
6 -> 11
] -> 17
= -> 9
7 -> 11
; -> 7
a -> 1
[ -> 16
7 -> 11
] -> 17
= -> 9
13 -> 11
; -> 7
a -> 1
[ -> 16
8 -> 11
] -> 17
= -> 9
94 -> 11
; -> 7
a -> 1
[ -> 16
9 -> 11
] -> 17
= -> 9
1 -> 11
; -> 7
printArray -> 1
( -> 2
Before -> 21
, -> 3
n -> 1
, -> 3
a -> 1
) -> 5
; -> 7
mysort -> 1
( -> 2
n -> 1
, -> 3
a -> 1
) -> 5
; -> 7
printArray -> 1
( -> 2
After -> 21
, -> 3
n -> 1
, -> 3
a -> 1
) -> 5
; -> 7
} -> 18

--------------------------------------------------
file: tests/char.c 1 pts
--------------------------------------------------
char* -> 0
g -> 1
; -> 2
void -> 3
main -> 1
( -> 4
) -> 5
{ -> 6
char* -> 0
h -> 1
; -> 2
h -> 1
= -> 7
Hello world -> 8
; -> 2
printf -> 1
( -> 4
h[6]=%c\n -> 8
, -> 9
h -> 1
[ -> 10
6 -> 11
] -> 12
) -> 5
; -> 2
g -> 1
= -> 7
This is a great class!! -> 8
; -> 2
printf -> 1
( -> 4
g[11]=%c\n -> 8
, -> 9
g -> 1
[ -> 10
11 -> 11
] -> 12
) -> 5
; -> 2
} -> 13

--------------------------------------------------
file: tests/char2.c 1 pts
--------------------------------------------------
char* -> 0
g -> 1
; -> 2
void -> 3
main -> 1
( -> 4
) -> 5
{ -> 6
char* -> 0
h -> 1
; -> 2
h -> 1
= -> 7
malloc -> 1
( -> 4
20 -> 8
) -> 5
; -> 2
h -> 1
[ -> 9
0 -> 8
] -> 10
= -> 7
65 -> 8
; -> 2
h -> 1
[ -> 9
1 -> 8
] -> 10
= -> 7
66 -> 8
; -> 2
h -> 1
[ -> 9
2 -> 8
] -> 10
= -> 7
67 -> 8
; -> 2
h -> 1
[ -> 9
3 -> 8
] -> 10
= -> 7
0 -> 8
; -> 2
printf -> 1
( -> 4
h=%s\n -> 11
, -> 12
h -> 1
) -> 5
; -> 2
g -> 1
= -> 7
malloc -> 1
( -> 4
20 -> 8
) -> 5
; -> 2
g -> 1
[ -> 9
0 -> 8
] -> 10
= -> 7
68 -> 8
; -> 2
g -> 1
[ -> 9
1 -> 8
] -> 10
= -> 7
69 -> 8
; -> 2
g -> 1
[ -> 9
2 -> 8
] -> 10
= -> 7
70 -> 8
; -> 2
g -> 1
[ -> 9
3 -> 8
] -> 10
= -> 7
0 -> 8
; -> 2
printf -> 1
( -> 4
g=%s\n -> 11
, -> 12
g -> 1
) -> 5
; -> 2
} -> 13

--------------------------------------------------
file: tests/continue.c 1 pts
--------------------------------------------------
long -> 0
i -> 1
; -> 2
void -> 3
main -> 1
( -> 4
) -> 5
{ -> 6
for -> 7
( -> 4
i -> 1
= -> 8
0 -> 9
; -> 2
i -> 1
< -> 10
15 -> 9
; -> 2
i -> 1
= -> 8
i -> 1
+ -> 11
1 -> 9
) -> 5
{ -> 6
printf -> 1
( -> 4
i=%d\n -> 12
, -> 13
i -> 1
) -> 5
; -> 2
if -> 14
( -> 4
i -> 1
< -> 10
6 -> 9
) -> 5
{ -> 6
i -> 1
= -> 8
i -> 1
+ -> 11
1 -> 9
; -> 2
continue -> 15
; -> 2
} -> 16
} -> 16
printf -> 1
( -> 4
for i=%d\n -> 12
, -> 13
i -> 1
) -> 5
; -> 2
i -> 1
= -> 8
0 -> 9
; -> 2
while -> 17
( -> 4
i -> 1
< -> 10
15 -> 9
) -> 5
{ -> 6
printf -> 1
( -> 4
i=%d\n -> 12
, -> 13
i -> 1
) -> 5
; -> 2
if -> 14
( -> 4
i -> 1
< -> 10
8 -> 9
) -> 5
{ -> 6
i -> 1
= -> 8
i -> 1
+ -> 11
2 -> 9
; -> 2
continue -> 15
; -> 2
} -> 16
i -> 1
= -> 8
i -> 1
+ -> 11
1 -> 9
; -> 2
} -> 16
printf -> 1
( -> 4
while i=%d\n -> 12
, -> 13
i -> 1
) -> 5
; -> 2
i -> 1
= -> 8
0 -> 9
; -> 2
do -> 18
{ -> 6
printf -> 1
( -> 4
i=%d\n -> 12
, -> 13
i -> 1
) -> 5
; -> 2
if -> 14
( -> 4
i -> 1
< -> 10
10 -> 9
) -> 5
{ -> 6
i -> 1
= -> 8
i -> 1
+ -> 11
2 -> 9
; -> 2
continue -> 15
; -> 2
} -> 16
i -> 1
= -> 8
i -> 1
+ -> 11
1 -> 9
; -> 2
} -> 16
while -> 17
( -> 4
i -> 1
< -> 10
15 -> 9
) -> 5
; -> 2
printf -> 1
( -> 4
do/while i=%d\n -> 12
, -> 13
i -> 1
) -> 5
; -> 2
printf -> 1
( -> 4
OK\n -> 12
) -> 5
; -> 2
} -> 16

--------------------------------------------------
file: tests/div.c 1 pts
--------------------------------------------------
void -> 0
main -> 1
( -> 2
) -> 3
{ -> 4
printf -> 1
( -> 2
88/11=%d\n -> 5
, -> 6
88 -> 7
/ -> 8
11 -> 7
) -> 3
; -> 9
printf -> 1
( -> 2
83%11=%d\n -> 5
, -> 6
83 -> 7
% -> 10
11 -> 7
) -> 3
; -> 9
} -> 11

--------------------------------------------------
file: tests/dowhile.c 1 pts
--------------------------------------------------
long -> 0
i -> 1
; -> 2
void -> 3
main -> 1
( -> 4
) -> 5
{ -> 6
i -> 1
= -> 7
0 -> 8
; -> 2
do -> 9
{ -> 6
printf -> 1
( -> 4
i=%d\n -> 10
, -> 11
i -> 1
) -> 5
; -> 2
i -> 1
= -> 7
i -> 1
+ -> 12
1 -> 8
; -> 2
} -> 13
while -> 14
( -> 4
i -> 1
< -> 15
11 -> 8
) -> 5
; -> 2
printf -> 1
( -> 4
OK\n -> 10
) -> 5
; -> 2
} -> 13

--------------------------------------------------
file: tests/equal.c 1 pts
--------------------------------------------------
void -> 0
main -> 1
( -> 2
) -> 3
{ -> 4
printf -> 1
( -> 2
9==8%d\n -> 5
, -> 6
9 -> 7
== -> 8
8 -> 7
) -> 3
; -> 9
printf -> 1
( -> 2
9==9=%d\n -> 5
, -> 6
9 -> 7
== -> 8
9 -> 7
) -> 3
; -> 9
printf -> 1
( -> 2
9!=8%d\n -> 5
, -> 6
9 -> 7
!= -> 10
8 -> 7
) -> 3
; -> 9
printf -> 1
( -> 2
9!=9=%d\n -> 5
, -> 6
9 -> 7
!= -> 10
9 -> 7
) -> 3
; -> 9
} -> 11

--------------------------------------------------
file: tests/expr.c 1 pts
--------------------------------------------------
void -> 0
main -> 1
( -> 2
) -> 3
{ -> 4
printf -> 1
( -> 2
((3*4)/2+9-7)%9=%d\n -> 5
, -> 6
( -> 2
( -> 2
3 -> 7
* -> 8
4 -> 7
) -> 3
/ -> 9
2 -> 7
+ -> 10
9 -> 7
- -> 11
7 -> 7
) -> 3
% -> 12
9 -> 7
) -> 3
; -> 13
} -> 14

--------------------------------------------------
file: tests/expr2.c 1 pts
--------------------------------------------------
long -> 0
g -> 1
; -> 2
long -> 0
compute -> 1
( -> 3
long -> 0
a -> 1
, -> 4
long -> 0
b -> 1
) -> 5
{ -> 6
long -> 0
j -> 1
; -> 2
long -> 0
h -> 1
; -> 2
j -> 1
= -> 7
g -> 1
+ -> 8
9 -> 9
; -> 2
h -> 1
= -> 7
( -> 3
a -> 1
+ -> 8
b -> 1
) -> 5
* -> 10
j -> 1
; -> 2
return -> 11
h -> 1
; -> 2
} -> 12
void -> 13
main -> 1
( -> 3
) -> 5
{ -> 6
long -> 0
j -> 1
; -> 2
g -> 1
= -> 7
9 -> 9
; -> 2
j -> 1
= -> 7
compute -> 1
( -> 3
2 -> 9
, -> 4
5 -> 9
) -> 5
; -> 2
printf -> 1
( -> 3
j=%d g=%d\n -> 14
, -> 4
j -> 1
, -> 4
g -> 1
) -> 5
; -> 2
} -> 12

--------------------------------------------------
file: tests/fact.c 1 pts
--------------------------------------------------
long -> 0
fact -> 1
( -> 2
long -> 0
n -> 1
) -> 3
{ -> 4
if -> 5
( -> 2
n -> 1
== -> 6
0 -> 7
) -> 3
return -> 8
1 -> 7
; -> 9
return -> 8
n -> 1
* -> 10
fact -> 1
( -> 2
n -> 1
- -> 11
1 -> 7
) -> 3
; -> 9
} -> 12
void -> 13
main -> 1
( -> 2
) -> 3
{ -> 4
printf -> 1
( -> 2
 Factorial of 5 = %d\n -> 14
, -> 15
fact -> 1
( -> 2
5 -> 7
) -> 3
) -> 3
; -> 9
} -> 12

--------------------------------------------------
file: tests/for.c 1 pts
--------------------------------------------------
long -> 0
i -> 1
; -> 2
void -> 3
main -> 1
( -> 4
) -> 5
{ -> 6
for -> 7
( -> 4
i -> 1
= -> 8
0 -> 9
; -> 2
i -> 1
< -> 10
15 -> 9
; -> 2
i -> 1
= -> 8
i -> 1
+ -> 11
1 -> 9
) -> 5
{ -> 6
printf -> 1
( -> 4
i=%d\n -> 12
, -> 13
i -> 1
) -> 5
; -> 2
} -> 14
printf -> 1
( -> 4
OK\n -> 12
) -> 5
; -> 2
} -> 14

--------------------------------------------------
file: tests/global.c 1 pts
--------------------------------------------------
long -> 0
g -> 1
; -> 2
void -> 3
main -> 1
( -> 4
) -> 5
{ -> 6
g -> 1
= -> 7
8 -> 8
; -> 2
printf -> 1
( -> 4
g=%d\n -> 9
, -> 10
g -> 1
) -> 5
; -> 2
} -> 11

--------------------------------------------------
file: tests/hello.c 1 pts
--------------------------------------------------
void -> 0
main -> 1
( -> 2
) -> 3
{ -> 4
printf -> 1
( -> 2
Hello world...\n -> 5
) -> 3
; -> 6
} -> 7

--------------------------------------------------
file: tests/if.c 1 pts
--------------------------------------------------
void -> 0
main -> 1
( -> 2
) -> 3
{ -> 4
if -> 5
( -> 2
1 -> 6
) -> 3
{ -> 4
printf -> 1
( -> 2
OK1\n -> 7
) -> 3
; -> 8
} -> 9
if -> 5
( -> 2
0 -> 6
) -> 3
{ -> 4
printf -> 1
( -> 2
OK2\n -> 7
) -> 3
; -> 8
} -> 9
if -> 5
( -> 2
1 -> 6
) -> 3
{ -> 4
printf -> 1
( -> 2
OK3\n -> 7
) -> 3
; -> 8
} -> 9
else -> 10
{ -> 4
printf -> 1
( -> 2
OK4\n -> 7
) -> 3
; -> 8
} -> 9
if -> 5
( -> 2
0 -> 6
) -> 3
{ -> 4
printf -> 1
( -> 2
OK5\n -> 7
) -> 3
; -> 8
} -> 9
else -> 10
{ -> 4
printf -> 1
( -> 2
OK6\n -> 7
) -> 3
; -> 8
} -> 9
printf -> 1
( -> 2
OK7\n -> 7
) -> 3
; -> 8
} -> 9

--------------------------------------------------
file: tests/local.c 1 pts
--------------------------------------------------
void -> 0
main -> 1
( -> 2
) -> 3
{ -> 4
long -> 5
l -> 1
; -> 6
l -> 1
= -> 7
6 -> 8
; -> 6
printf -> 1
( -> 2
l=%d\n -> 9
, -> 10
l -> 1
) -> 3
; -> 6
} -> 11

--------------------------------------------------
file: tests/max.c 1 pts
--------------------------------------------------
long -> 0
max -> 1
( -> 2
long* -> 3
a -> 1
, -> 4
long -> 0
n -> 1
) -> 5
{ -> 6
long -> 0
i -> 1
; -> 7
long -> 0
m -> 1
; -> 7
m -> 1
= -> 8
a -> 1
[ -> 9
0 -> 10
] -> 11
; -> 7
for -> 12
( -> 2
i -> 1
= -> 8
0 -> 10
; -> 7
i -> 1
< -> 13
n -> 1
; -> 7
i -> 1
= -> 8
i -> 1
+ -> 14
1 -> 10
) -> 5
{ -> 6
if -> 15
( -> 2
m -> 1
< -> 13
a -> 1
[ -> 9
i -> 1
] -> 11
) -> 5
{ -> 6
m -> 1
= -> 8
a -> 1
[ -> 9
i -> 1
] -> 11
; -> 7
} -> 16
} -> 16
return -> 17
m -> 1
; -> 7
} -> 16
long* -> 3
a -> 1
; -> 7
long -> 0
n -> 1
; -> 7
long -> 0
i -> 1
; -> 7
void -> 18
main -> 1
( -> 2
) -> 5
{ -> 6
n -> 1
= -> 8
10 -> 10
; -> 7
a -> 1
= -> 8
malloc -> 1
( -> 2
10 -> 10
* -> 19
8 -> 10
) -> 5
; -> 7
a -> 1
[ -> 9
0 -> 10
] -> 11
= -> 8
8 -> 10
; -> 7
a -> 1
[ -> 9
1 -> 10
] -> 11
= -> 8
7 -> 10
; -> 7
a -> 1
[ -> 9
2 -> 10
] -> 11
= -> 8
1 -> 10
; -> 7
a -> 1
[ -> 9
3 -> 10
] -> 11
= -> 8
9 -> 10
; -> 7
a -> 1
[ -> 9
4 -> 10
] -> 11
= -> 8
11 -> 10
; -> 7
a -> 1
[ -> 9
5 -> 10
] -> 11
= -> 8
83 -> 10
; -> 7
a -> 1
[ -> 9
6 -> 10
] -> 11
= -> 8
7 -> 10
; -> 7
a -> 1
[ -> 9
7 -> 10
] -> 11
= -> 8
13 -> 10
; -> 7
a -> 1
[ -> 9
8 -> 10
] -> 11
= -> 8
94 -> 10
; -> 7
a -> 1
[ -> 9
9 -> 10
] -> 11
= -> 8
1 -> 10
; -> 7
for -> 12
( -> 2
i -> 1
= -> 8
0 -> 10
; -> 7
i -> 1
< -> 13
n -> 1
; -> 7
i -> 1
= -> 8
i -> 1
+ -> 14
1 -> 10
) -> 5
{ -> 6
printf -> 1
( -> 2
%d: %d\n -> 20
, -> 4
i -> 1
, -> 4
a -> 1
[ -> 9
i -> 1
] -> 11
) -> 5
; -> 7
} -> 16
printf -> 1
( -> 2
n=%d\n -> 20
, -> 4
n -> 1
) -> 5
; -> 7
printf -> 1
( -> 2
max=%d\n -> 20
, -> 4
max -> 1
( -> 2
a -> 1
, -> 4
n -> 1
) -> 5
) -> 5
; -> 7
} -> 16

--------------------------------------------------
file: tests/nested.c 1 pts
--------------------------------------------------
long -> 0
h -> 1
; -> 2
long -> 0
compute -> 1
( -> 3
long -> 0
a -> 1
, -> 4
long -> 0
b -> 1
, -> 4
long -> 0
c -> 1
) -> 5
{ -> 6
long -> 0
d -> 1
; -> 2
d -> 1
= -> 7
10 -> 8
; -> 2
h -> 1
= -> 7
11 -> 8
; -> 2
return -> 9
2 -> 8
* -> 10
a -> 1
* -> 10
a -> 1
- -> 11
4 -> 8
* -> 10
( -> 3
b -> 1
- -> 11
c -> 1
) -> 5
* -> 10
d -> 1
- -> 11
h -> 1
; -> 2
} -> 12
long -> 0
main -> 1
( -> 3
) -> 5
{ -> 6
printf -> 1
( -> 3
compute=%d\n -> 13
, -> 4
compute -> 1
( -> 3
1 -> 8
, -> 4
2 -> 8
, -> 4
3 -> 8
) -> 5
) -> 5
; -> 2
} -> 12

--------------------------------------------------
file: tests/or.c 1 pts
--------------------------------------------------
void -> 0
main -> 1
( -> 2
) -> 3
{ -> 4
printf -> 1
( -> 2
0 || 0 = %d\n -> 5
, -> 6
0 -> 7
|| -> 8
0 -> 7
) -> 3
; -> 9
printf -> 1
( -> 2
0 || 1 = %d\n -> 5
, -> 6
0 -> 7
|| -> 8
1 -> 7
) -> 3
; -> 9
printf -> 1
( -> 2
1 || 0 = %d\n -> 5
, -> 6
1 -> 7
|| -> 8
0 -> 7
) -> 3
; -> 9
printf -> 1
( -> 2
1 || 1 = %d\n -> 5
, -> 6
1 -> 7
|| -> 8
1 -> 7
) -> 3
; -> 9
} -> 10

--------------------------------------------------
file: tests/queens.c 1 pts
--------------------------------------------------
long* -> 0
queens -> 1
; -> 2
long -> 3
solid -> 1
; -> 2
long -> 3
abs -> 1
( -> 4
long -> 3
v -> 1
) -> 5
{ -> 6
if -> 7
( -> 4
v -> 1
< -> 8
0 -> 9
) -> 5
return -> 10
( -> 4
- -> 11
1 -> 9
) -> 5
* -> 12
v -> 1
; -> 2
return -> 10
v -> 1
; -> 2
} -> 13
long -> 3
check -> 1
( -> 4
long -> 3
depth -> 1
) -> 5
{ -> 6
long -> 3
i -> 1
; -> 2
for -> 14
( -> 4
i -> 1
= -> 15
0 -> 9
; -> 2
i -> 1
< -> 8
depth -> 1
; -> 2
i -> 1
= -> 15
i -> 1
+ -> 16
1 -> 9
) -> 5
{ -> 6
if -> 7
( -> 4
( -> 4
queens -> 1
[ -> 17
i -> 1
] -> 18
== -> 19
queens -> 1
[ -> 17
depth -> 1
] -> 18
) -> 5
|| -> 20
( -> 4
abs -> 1
( -> 4
queens -> 1
[ -> 17
i -> 1
] -> 18
- -> 11
queens -> 1
[ -> 17
depth -> 1
] -> 18
) -> 5
== -> 19
( -> 4
depth -> 1
- -> 11
i -> 1
) -> 5
) -> 5
) -> 5
{ -> 6
return -> 10
0 -> 9
; -> 2
} -> 13
} -> 13
return -> 10
1 -> 9
; -> 2
} -> 13
long -> 3
bruteforce -> 1
( -> 4
long -> 3
depth -> 1
) -> 5
{ -> 6
if -> 7
( -> 4
depth -> 1
== -> 19
8 -> 9
) -> 5
{ -> 6
long -> 3
i -> 1
; -> 2
printf -> 1
( -> 4
Solution #%2ld = [  -> 21
, -> 22
solid -> 1
) -> 5
; -> 2
solid -> 1
= -> 15
solid -> 1
+ -> 16
1 -> 9
; -> 2
for -> 14
( -> 4
i -> 1
= -> 15
0 -> 9
; -> 2
i -> 1
< -> 8
8 -> 9
; -> 2
i -> 1
= -> 15
i -> 1
+ -> 16
1 -> 9
) -> 5
{ -> 6
printf -> 1
( -> 4
%ld  -> 21
, -> 22
queens -> 1
[ -> 17
i -> 1
] -> 18
+ -> 16
1 -> 9
) -> 5
; -> 2
} -> 13
printf -> 1
( -> 4
]\n -> 21
) -> 5
; -> 2
return -> 10
0 -> 9
; -> 2
} -> 13
long -> 3
i -> 1
; -> 2
for -> 14
( -> 4
i -> 1
= -> 15
0 -> 9
; -> 2
i -> 1
< -> 8
8 -> 9
; -> 2
i -> 1
= -> 15
i -> 1
+ -> 16
1 -> 9
) -> 5
{ -> 6
queens -> 1
[ -> 17
depth -> 1
] -> 18
= -> 15
i -> 1
; -> 2
if -> 7
( -> 4
check -> 1
( -> 4
depth -> 1
) -> 5
!= -> 23
0 -> 9
) -> 5
{ -> 6
bruteforce -> 1
( -> 4
depth -> 1
+ -> 16
1 -> 9
) -> 5
; -> 2
} -> 13
} -> 13
return -> 10
0 -> 9
; -> 2
} -> 13
void -> 24
main -> 1
( -> 4
) -> 5
{ -> 6
queens -> 1
= -> 15
malloc -> 1
( -> 4
8 -> 9
* -> 12
8 -> 9
) -> 5
; -> 2
solid -> 1
= -> 15
1 -> 9
; -> 2
bruteforce -> 1
( -> 4
0 -> 9
) -> 5
; -> 2
} -> 13

--------------------------------------------------
file: tests/quicksort.c 1 pts
--------------------------------------------------
void -> 0
printArray -> 1
( -> 2
long* -> 3
a -> 1
, -> 4
long -> 5
left -> 1
, -> 4
long -> 5
right -> 1
) -> 6
{ -> 7
long -> 5
i -> 1
; -> 8
for -> 9
( -> 2
i -> 1
= -> 10
left -> 1
; -> 8
i -> 1
<= -> 11
right -> 1
; -> 8
i -> 1
= -> 10
i -> 1
+ -> 12
1 -> 13
) -> 6
{ -> 7
printf -> 1
( -> 2
%d\n -> 14
, -> 4
a -> 1
[ -> 15
i -> 1
] -> 16
) -> 6
; -> 8
} -> 17
} -> 17
void -> 0
print -> 1
( -> 2
char* -> 18
s -> 1
) -> 6
{ -> 7
printf -> 1
( -> 2
==%s==\n -> 14
, -> 4
s -> 1
) -> 6
; -> 8
} -> 17
long -> 5
quicksortsubrange -> 1
( -> 2
long* -> 3
a -> 1
, -> 4
long -> 5
left -> 1
, -> 4
long -> 5
right -> 1
) -> 6
{ -> 7
if -> 19
( -> 2
left -> 1
>= -> 20
right -> 1
) -> 6
{ -> 7
return -> 21
0 -> 13
; -> 8
} -> 17
long -> 5
x -> 1
; -> 8
x -> 1
= -> 10
a -> 1
[ -> 15
right -> 1
] -> 16
; -> 8
long -> 5
l -> 1
; -> 8
l -> 1
= -> 10
left -> 1
; -> 8
long -> 5
g -> 1
; -> 8
g -> 1
= -> 10
right -> 1
- -> 22
1 -> 13
; -> 8
while -> 23
( -> 2
l -> 1
< -> 24
g -> 1
) -> 6
{ -> 7
while -> 23
( -> 2
l -> 1
< -> 24
g -> 1
&& -> 25
a -> 1
[ -> 15
l -> 1
] -> 16
< -> 24
x -> 1
) -> 6
{ -> 7
l -> 1
= -> 10
l -> 1
+ -> 12
1 -> 13
; -> 8
} -> 17
while -> 23
( -> 2
l -> 1
< -> 24
g -> 1
&& -> 25
a -> 1
[ -> 15
g -> 1
] -> 16
> -> 26
x -> 1
) -> 6
{ -> 7
g -> 1
= -> 10
g -> 1
- -> 22
1 -> 13
; -> 8
} -> 17
if -> 19
( -> 2
l -> 1
< -> 24
g -> 1
) -> 6
{ -> 7
long -> 5
tmp -> 1
; -> 8
tmp -> 1
= -> 10
a -> 1
[ -> 15
l -> 1
] -> 16
; -> 8
a -> 1
[ -> 15
l -> 1
] -> 16
= -> 10
a -> 1
[ -> 15
g -> 1
] -> 16
; -> 8
a -> 1
[ -> 15
g -> 1
] -> 16
= -> 10
tmp -> 1
; -> 8
} -> 17
} -> 17
a -> 1
[ -> 15
right -> 1
] -> 16
= -> 10
a -> 1
[ -> 15
l -> 1
] -> 16
; -> 8
a -> 1
[ -> 15
l -> 1
] -> 16
= -> 10
x -> 1
; -> 8
quicksortsubrange -> 1
( -> 2
a -> 1
, -> 4
left -> 1
, -> 4
l -> 1
- -> 22
1 -> 13
) -> 6
; -> 8
quicksortsubrange -> 1
( -> 2
a -> 1
, -> 4
g -> 1
+ -> 12
1 -> 13
, -> 4
right -> 1
) -> 6
; -> 8
} -> 17
void -> 0
quicksort -> 1
( -> 2
long* -> 3
a -> 1
, -> 4
long -> 5
n -> 1
) -> 6
{ -> 7
quicksortsubrange -> 1
( -> 2
a -> 1
, -> 4
0 -> 13
, -> 4
n -> 1
- -> 22
1 -> 13
) -> 6
; -> 8
} -> 17
void -> 0
main -> 1
( -> 2
) -> 6
{ -> 7
print -> 1
( -> 2
Hello -> 14
) -> 6
; -> 8
long -> 5
n -> 1
; -> 8
n -> 1
= -> 10
10 -> 13
; -> 8
long* -> 3
a -> 1
; -> 8
a -> 1
= -> 10
malloc -> 1
( -> 2
n -> 1
* -> 27
8 -> 13
) -> 6
; -> 8
a -> 1
[ -> 15
0 -> 13
] -> 16
= -> 10
8 -> 13
; -> 8
a -> 1
[ -> 15
1 -> 13
] -> 16
= -> 10
7 -> 13
; -> 8
a -> 1
[ -> 15
2 -> 13
] -> 16
= -> 10
1 -> 13
; -> 8
a -> 1
[ -> 15
3 -> 13
] -> 16
= -> 10
9 -> 13
; -> 8
a -> 1
[ -> 15
4 -> 13
] -> 16
= -> 10
11 -> 13
; -> 8
a -> 1
[ -> 15
5 -> 13
] -> 16
= -> 10
83 -> 13
; -> 8
a -> 1
[ -> 15
6 -> 13
] -> 16
= -> 10
7 -> 13
; -> 8
a -> 1
[ -> 15
7 -> 13
] -> 16
= -> 10
13 -> 13
; -> 8
a -> 1
[ -> 15
8 -> 13
] -> 16
= -> 10
94 -> 13
; -> 8
a -> 1
[ -> 15
9 -> 13
] -> 16
= -> 10
1 -> 13
; -> 8
printf -> 1
( -> 2
-------- Before -------\n -> 14
) -> 6
; -> 8
printArray -> 1
( -> 2
a -> 1
, -> 4
0 -> 13
, -> 4
n -> 1
- -> 22
1 -> 13
) -> 6
; -> 8
quicksort -> 1
( -> 2
a -> 1
, -> 4
n -> 1
) -> 6
; -> 8
printf -> 1
( -> 2
-------- After -------\n -> 14
) -> 6
; -> 8
printArray -> 1
( -> 2
a -> 1
, -> 4
0 -> 13
, -> 4
n -> 1
- -> 22
1 -> 13
) -> 6
; -> 8
} -> 17

--------------------------------------------------
file: tests/quicksortstr.c 1 pts
--------------------------------------------------
void -> 0
printArray -> 1
( -> 2
char** -> 3
a -> 1
, -> 4
long -> 5
left -> 1
, -> 4
long -> 5
right -> 1
) -> 6
{ -> 7
long -> 5
i -> 1
; -> 8
for -> 9
( -> 2
i -> 1
= -> 10
left -> 1
; -> 8
i -> 1
<= -> 11
right -> 1
; -> 8
i -> 1
= -> 10
i -> 1
+ -> 12
1 -> 13
) -> 6
{ -> 7
printf -> 1
( -> 2
%d: %s\n -> 14
, -> 4
i -> 1
, -> 4
a -> 1
[ -> 15
i -> 1
] -> 16
) -> 6
; -> 8
} -> 17
} -> 17
void -> 0
print -> 1
( -> 2
char* -> 18
s -> 1
) -> 6
{ -> 7
printf -> 1
( -> 2
==%s==\n -> 14
, -> 4
s -> 1
) -> 6
; -> 8
} -> 17
long -> 5
mystrcmp -> 1
( -> 2
char* -> 18
s1 -> 1
, -> 4
char* -> 18
s2 -> 1
) -> 6
{ -> 7
while -> 19
( -> 2
s1 -> 1
[ -> 15
0 -> 13
] -> 16
&& -> 20
s2 -> 1
[ -> 15
0 -> 13
] -> 16
&& -> 20
s1 -> 1
[ -> 15
0 -> 13
] -> 16
== -> 21
s2 -> 1
[ -> 15
0 -> 13
] -> 16
) -> 6
{ -> 7
s1 -> 1
= -> 10
s1 -> 1
+ -> 12
1 -> 13
; -> 8
s2 -> 1
= -> 10
s2 -> 1
+ -> 12
1 -> 13
; -> 8
} -> 17
if -> 22
( -> 2
s1 -> 1
[ -> 15
0 -> 13
] -> 16
== -> 21
0 -> 13
&& -> 20
s2 -> 1
[ -> 15
0 -> 13
] -> 16
== -> 21
0 -> 13
) -> 6
{ -> 7
return -> 23
0 -> 13
; -> 8
} -> 17
if -> 22
( -> 2
s1 -> 1
[ -> 15
0 -> 13
] -> 16
== -> 21
0 -> 13
&& -> 20
s2 -> 1
[ -> 15
0 -> 13
] -> 16
!= -> 24
0 -> 13
) -> 6
{ -> 7
return -> 23
- -> 25
1 -> 13
; -> 8
} -> 17
if -> 22
( -> 2
s1 -> 1
[ -> 15
0 -> 13
] -> 16
!= -> 24
0 -> 13
&& -> 20
s2 -> 1
[ -> 15
0 -> 13
] -> 16
== -> 21
0 -> 13
) -> 6
{ -> 7
return -> 23
1 -> 13
; -> 8
} -> 17
if -> 22
( -> 2
s1 -> 1
[ -> 15
0 -> 13
] -> 16
> -> 26
s2 -> 1
[ -> 15
0 -> 13
] -> 16
) -> 6
{ -> 7
return -> 23
1 -> 13
; -> 8
} -> 17
return -> 23
- -> 25
1 -> 13
; -> 8
} -> 17
long -> 5
quicksortsubrange -> 1
( -> 2
char** -> 3
a -> 1
, -> 4
long -> 5
left -> 1
, -> 4
long -> 5
right -> 1
) -> 6
{ -> 7
if -> 22
( -> 2
left -> 1
>= -> 27
right -> 1
) -> 6
{ -> 7
return -> 23
0 -> 13
; -> 8
} -> 17
char* -> 18
x -> 1
; -> 8
x -> 1
= -> 10
a -> 1
[ -> 15
right -> 1
] -> 16
; -> 8
long -> 5
l -> 1
; -> 8
l -> 1
= -> 10
left -> 1
; -> 8
long -> 5
g -> 1
; -> 8
g -> 1
= -> 10
right -> 1
- -> 25
1 -> 13
; -> 8
while -> 19
( -> 2
l -> 1
< -> 28
g -> 1
) -> 6
{ -> 7
while -> 19
( -> 2
l -> 1
< -> 28
g -> 1
&& -> 20
mystrcmp -> 1
( -> 2
a -> 1
[ -> 15
l -> 1
] -> 16
, -> 4
x -> 1
) -> 6
< -> 28
0 -> 13
) -> 6
{ -> 7
l -> 1
= -> 10
l -> 1
+ -> 12
1 -> 13
; -> 8
} -> 17
while -> 19
( -> 2
l -> 1
< -> 28
g -> 1
&& -> 20
mystrcmp -> 1
( -> 2
a -> 1
[ -> 15
g -> 1
] -> 16
, -> 4
x -> 1
) -> 6
>= -> 27
0 -> 13
) -> 6
{ -> 7
g -> 1
= -> 10
g -> 1
- -> 25
1 -> 13
; -> 8
} -> 17
if -> 22
( -> 2
l -> 1
< -> 28
g -> 1
) -> 6
{ -> 7
long -> 5
tmp -> 1
; -> 8
tmp -> 1
= -> 10
a -> 1
[ -> 15
l -> 1
] -> 16
; -> 8
a -> 1
[ -> 15
l -> 1
] -> 16
= -> 10
a -> 1
[ -> 15
g -> 1
] -> 16
; -> 8
a -> 1
[ -> 15
g -> 1
] -> 16
= -> 10
tmp -> 1
; -> 8
} -> 17
} -> 17
a -> 1
[ -> 15
right -> 1
] -> 16
= -> 10
a -> 1
[ -> 15
l -> 1
] -> 16
; -> 8
a -> 1
[ -> 15
l -> 1
] -> 16
= -> 10
x -> 1
; -> 8
quicksortsubrange -> 1
( -> 2
a -> 1
, -> 4
left -> 1
, -> 4
l -> 1
- -> 25
1 -> 13
) -> 6
; -> 8
quicksortsubrange -> 1
( -> 2
a -> 1
, -> 4
g -> 1
+ -> 12
1 -> 13
, -> 4
right -> 1
) -> 6
; -> 8
} -> 17
void -> 0
quicksort -> 1
( -> 2
long* -> 29
a -> 1
, -> 4
long -> 5
n -> 1
) -> 6
{ -> 7
quicksortsubrange -> 1
( -> 2
a -> 1
, -> 4
0 -> 13
, -> 4
n -> 1
- -> 25
1 -> 13
) -> 6
; -> 8
} -> 17
void -> 0
main -> 1
( -> 2
) -> 6
{ -> 7
long -> 5
n -> 1
; -> 8
n -> 1
= -> 10
6 -> 13
; -> 8
char** -> 3
a -> 1
; -> 8
a -> 1
= -> 10
malloc -> 1
( -> 2
n -> 1
* -> 30
8 -> 13
) -> 6
; -> 8
a -> 1
[ -> 15
0 -> 13
] -> 16
= -> 10
Rachael -> 14
; -> 8
a -> 1
[ -> 15
1 -> 13
] -> 16
= -> 10
Monica -> 14
; -> 8
a -> 1
[ -> 15
2 -> 13
] -> 16
= -> 10
Phoebe -> 14
; -> 8
a -> 1
[ -> 15
3 -> 13
] -> 16
= -> 10
Joey -> 14
; -> 8
a -> 1
[ -> 15
4 -> 13
] -> 16
= -> 10
Ross -> 14
; -> 8
a -> 1
[ -> 15
5 -> 13
] -> 16
= -> 10
Chandler -> 14
; -> 8
printf -> 1
( -> 2
-------- Before -------\n -> 14
) -> 6
; -> 8
printArray -> 1
( -> 2
a -> 1
, -> 4
0 -> 13
, -> 4
n -> 1
- -> 25
1 -> 13
) -> 6
; -> 8
quicksort -> 1
( -> 2
a -> 1
, -> 4
n -> 1
) -> 6
; -> 8
printf -> 1
( -> 2
-------- After -------\n -> 14
) -> 6
; -> 8
printArray -> 1
( -> 2
a -> 1
, -> 4
0 -> 13
, -> 4
n -> 1
- -> 25
1 -> 13
) -> 6
; -> 8
} -> 17

--------------------------------------------------
file: tests/rel.c 1 pts
--------------------------------------------------
void -> 0
main -> 1
( -> 2
) -> 3
{ -> 4
printf -> 1
( -> 2
9>8=%d\n -> 5
, -> 6
9 -> 7
< -> 8
8 -> 7
) -> 3
; -> 9
printf -> 1
( -> 2
8<9=%d\n -> 5
, -> 6
8 -> 7
< -> 8
9 -> 7
) -> 3
; -> 9
printf -> 1
( -> 2
9<8=%d\n -> 5
, -> 6
9 -> 7
< -> 8
8 -> 7
) -> 3
; -> 9
printf -> 1
( -> 2
8<9=%d\n -> 5
, -> 6
8 -> 7
< -> 8
9 -> 7
) -> 3
; -> 9
printf -> 1
( -> 2
9>=8=%d\n -> 5
, -> 6
9 -> 7
>= -> 10
8 -> 7
) -> 3
; -> 9
printf -> 1
( -> 2
8>=9=%d\n -> 5
, -> 6
8 -> 7
>= -> 10
9 -> 7
) -> 3
; -> 9
printf -> 1
( -> 2
9>=9=%d\n -> 5
, -> 6
9 -> 7
>= -> 10
9 -> 7
) -> 3
; -> 9
printf -> 1
( -> 2
9>=9=%d\n -> 5
, -> 6
9 -> 7
>= -> 10
9 -> 7
) -> 3
; -> 9
printf -> 1
( -> 2
9<=8=%d\n -> 5
, -> 6
9 -> 7
<= -> 11
8 -> 7
) -> 3
; -> 9
printf -> 1
( -> 2
8<=9=%d\n -> 5
, -> 6
8 -> 7
<= -> 11
9 -> 7
) -> 3
; -> 9
printf -> 1
( -> 2
9<=9=%d\n -> 5
, -> 6
9 -> 7
<= -> 11
9 -> 7
) -> 3
; -> 9
printf -> 1
( -> 2
9<=9=%d\n -> 5
, -> 6
9 -> 7
<= -> 11
9 -> 7
) -> 3
; -> 9
} -> 12

--------------------------------------------------
file: tests/return.c 1 pts
--------------------------------------------------
long -> 0
compute -> 1
( -> 2
long -> 0
a -> 1
, -> 3
long -> 0
b -> 1
) -> 4
{ -> 5
long -> 0
x -> 1
; -> 6
x -> 1
= -> 7
a -> 1
+ -> 8
b -> 1
; -> 6
return -> 9
x -> 1
; -> 6
} -> 10
void -> 11
main -> 1
( -> 2
) -> 4
{ -> 5
long -> 0
f -> 1
; -> 6
f -> 1
= -> 7
compute -> 1
( -> 2
5 -> 12
, -> 3
6 -> 12
) -> 4
; -> 6
printf -> 1
( -> 2
sum=%d\n -> 13
, -> 3
f -> 1
) -> 4
; -> 6
} -> 10

--------------------------------------------------
file: tests/strlen.c 1 pts
--------------------------------------------------
long -> 0
mystrlen -> 1
( -> 2
char* -> 3
s -> 1
) -> 4
{ -> 5
long -> 0
l -> 1
; -> 6
l -> 1
= -> 7
0 -> 8
; -> 6
while -> 9
( -> 2
s -> 1
[ -> 10
l -> 1
] -> 11
) -> 4
{ -> 5
l -> 1
= -> 7
l -> 1
+ -> 12
1 -> 8
; -> 6
} -> 13
return -> 14
l -> 1
; -> 6
} -> 13
void -> 15
mystrcpy -> 1
( -> 2
char* -> 3
s1 -> 1
, -> 16
char* -> 3
s2 -> 1
) -> 4
{ -> 5
while -> 9
( -> 2
s2 -> 1
[ -> 10
0 -> 8
] -> 11
) -> 4
{ -> 5
s1 -> 1
[ -> 10
0 -> 8
] -> 11
= -> 7
s2 -> 1
[ -> 10
0 -> 8
] -> 11
; -> 6
s1 -> 1
= -> 7
s1 -> 1
+ -> 12
1 -> 8
; -> 6
s2 -> 1
= -> 7
s2 -> 1
+ -> 12
1 -> 8
; -> 6
} -> 13
s1 -> 1
[ -> 10
0 -> 8
] -> 11
= -> 7
0 -> 8
; -> 6
} -> 13
char* -> 3
g -> 1
; -> 6
void -> 15
main -> 1
( -> 2
) -> 4
{ -> 5
char* -> 3
h -> 1
; -> 6
h -> 1
= -> 7
malloc -> 1
( -> 2
30 -> 8
) -> 4
; -> 6
mystrcpy -> 1
( -> 2
h -> 1
, -> 16
Hello world -> 17
) -> 4
; -> 6
printf -> 1
( -> 2
h=%s\n -> 17
, -> 16
h -> 1
) -> 4
; -> 6
printf -> 1
( -> 2
l=%d\n -> 17
, -> 16
mystrlen -> 1
( -> 2
h -> 1
) -> 4
) -> 4
; -> 6
g -> 1
= -> 7
malloc -> 1
( -> 2
30 -> 8
) -> 4
; -> 6
strcpy -> 1
( -> 2
g -> 1
, -> 16
This is a great course -> 17
) -> 4
; -> 6
printf -> 1
( -> 2
g=%s\n -> 17
, -> 16
g -> 1
) -> 4
; -> 6
printf -> 1
( -> 2
l=%d\n -> 17
, -> 16
mystrlen -> 1
( -> 2
g -> 1
) -> 4
) -> 4
; -> 6
} -> 13

--------------------------------------------------
file: tests/sum.c 1 pts
--------------------------------------------------
long -> 0
sum -> 1
( -> 2
long -> 0
n -> 1
, -> 3
long* -> 4
a -> 1
) -> 5
{ -> 6
long -> 0
i -> 1
, -> 3
s -> 1
; -> 7
s -> 1
= -> 8
0 -> 9
; -> 7
for -> 10
( -> 2
i -> 1
= -> 8
0 -> 9
; -> 7
i -> 1
< -> 11
n -> 1
; -> 7
i -> 1
= -> 8
i -> 1
+ -> 12
1 -> 9
) -> 5
{ -> 6
s -> 1
= -> 8
s -> 1
+ -> 12
a -> 1
[ -> 13
i -> 1
] -> 14
; -> 7
} -> 15
return -> 16
s -> 1
; -> 7
} -> 15
long -> 0
main -> 1
( -> 2
) -> 5
{ -> 6
long* -> 4
a -> 1
; -> 7
a -> 1
= -> 8
malloc -> 1
( -> 2
5 -> 9
* -> 17
8 -> 9
) -> 5
; -> 7
a -> 1
[ -> 13
0 -> 9
] -> 14
= -> 8
4 -> 9
; -> 7
a -> 1
[ -> 13
1 -> 9
] -> 14
= -> 8
3 -> 9
; -> 7
a -> 1
[ -> 13
2 -> 9
] -> 14
= -> 8
1 -> 9
; -> 7
a -> 1
[ -> 13
3 -> 9
] -> 14
= -> 8
7 -> 9
; -> 7
a -> 1
[ -> 13
4 -> 9
] -> 14
= -> 8
6 -> 9
; -> 7
long -> 0
s -> 1
; -> 7
s -> 1
= -> 8
sum -> 1
( -> 2
5 -> 9
, -> 3
a -> 1
) -> 5
; -> 7
printf -> 1
( -> 2
sum=%d\n -> 18
, -> 3
s -> 1
) -> 5
; -> 7
} -> 15

--------------------------------------------------
file: tests/while.c 1 pts
--------------------------------------------------
long -> 0
i -> 1
; -> 2
void -> 3
main -> 1
( -> 4
) -> 5
{ -> 6
i -> 1
= -> 7
0 -> 8
; -> 2
while -> 9
( -> 4
i -> 1
< -> 10
9 -> 8
) -> 5
{ -> 6
printf -> 1
( -> 4
i=%d\n -> 11
, -> 12
i -> 1
) -> 5
; -> 2
i -> 1
= -> 7
i -> 1
+ -> 13
1 -> 8
; -> 2
} -> 14
printf -> 1
( -> 4
OK\n -> 11
) -> 5
; -> 2
} -> 14

